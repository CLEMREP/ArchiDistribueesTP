openapi: "3.0.0"
info:
  title: "User Service API"
  version: "1.0.0"
  description: "API for managing users and their bookings"

servers:
  - url: "http://localhost:3004"

paths:
  /:
    get:
      summary: "Get a welcome message"
      responses:
        200:
          description: "Successful response"
          content:
            text/html:
              example: "<h1 style='color:blue'>Welcome to the User service!</h1>"

  /users/{userid}:
    get:
      summary: "Get user by ID"
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              example: {"id": "chris_rivers", "name": "Chris Rivers", "last_active": 123456789}
        400:
          description: "User ID not found"
          content:
            application/json:
              example: {"error": "User ID not found"}

  /users/bookings/{userid}:
    get:
      summary: "Get user bookings by ID"
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              example: [{"userid": "chris_rivers", "dates": [{"date": "2023-01-01", "movies": [{"id": 1, "title": "Movie 1", "rating": 4.5, "director": "Director 1"}]}]}]
        400:
          description: "Bookings not found for this User ID"
          content:
            application/json:
              example: {"error": "Bookings not found for this User ID"}

  /users/add:
    post:
      summary: "Create a new user"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userid:
                  type: string
                name:
                  type: string
                last_active:
                  type: integer
              required:
                - userid
                - name
                - last_active
      responses:
        200:
          description: "User created successfully"
          content:
            application/json:
              example: {"success": "User created with success"}
        400:
          description: "Missing parameters (name, last_active)"
          content:
            application/json:
              example: {"error": "Missing parameters (name, last_active)"}

  /users/delete/{userid}:
    delete:
      summary: "Delete user by ID"
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "User deleted successfully"
          content:
            application/json:
              example: {"success": "Utilisateur supprimé avec succès"}
        400:
          description: "User not found"
          content:
            application/json:
              example: {"error": "Utilisateur non trouvé"}

  /users/update/{userid}:
    put:
      summary: "Update user by ID"
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                last_active:
                  type: integer
      responses:
        200:
          description: "User updated successfully"
          content:
            application/json:
              example: {"success": "Utilisateur mis à jour avec succès"}
        400:
          description: "User not found"
          content:
            application/json:
              example: {"error": "Utilisateur non trouvé"}
